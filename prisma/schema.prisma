// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id                       String  @id @default(cuid())
  name                     String
  email                    String  @unique
  password                 String
  role                     Role    @default(USER)
  defaultShippingAddressId String?
  defaultBillingAddressId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  cartItem  CartItem[]
  orders    Order[]

  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String  @db.Text
  price       Decimal
  tags        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItem      CartItem[]
  orderProducts OrderProduct[]

  @@map("products")
}

model CartItem {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_item")
}

model Order {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  netAmount Decimal
  address   String
  status    OrderEventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderProducts OrderProduct[]
  orderEvents   OrderEvent[]

  @@map("order")
}

model OrderProduct {
  id String @id @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id String @id @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  status OrderEventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_events")
}
